package KxJRT;

import java.io.*;
import java.lang.*;
import java.util.*;
import java.text.SimpleDateFormat;
import java.text.ParseException;

public class KxJApplyWithMapWrapper {
	public static String mDesc = "Automatic Analytics command line score calculator.\n	 Expected input:\n	 \n	 KxJApplyWithMapWrapper ScorerClass var1=value1 var2=value2 ...\n	 \n	 where \"ScorerClass\" is the name of the class generated by Automatic Analytics (which should\n	 be in the classpath)";
	
	public String mScorerClassName;
	private IKxJModel mScorerModel;
	
	public LinkedHashMap<String,String> mInputVariables = new LinkedHashMap<String,String>();
	
	private static void usage() {
		System.err.println( "Usage : " +
							"[-separator <sep>] " +
							"[-out <file>] " +
							"-model <model> " +
							"-in <file> " );
		System.err.println("\nApply a Automatic Analytics Java model on a flat file.\n");
		System.err.println("  -separator\t\tset field separator ( default is "+
						   "',' )");
		System.err.println("  -out\t\t\tset output file ( default is "+
						   "standard output )");
		System.err.println("  -model\t\tset Automatic Analytics java model" );
		System.err.println("  -in\t\tset input file to score" );
		System.err.println("\nSetting 'nonames' implies the input file has"+
						   " the same structure\nas dataset used for "+
						   "training.\n");
		throw new RuntimeException("Error usage\n");
	}

	private static void printArgError( String iError, String iArg ) {
		String lErrorString = "error : " + iError + " argument";
		if( iArg.equals("") ) {
			lErrorString += "s.";
		}
		else {
			lErrorString += " " + iArg + ".";
		}
		System.err.println( lErrorString );
		System.err.println( "type -usage for info." );
		KxLog.getInstance().print( lErrorString +"\n");
		throw new RuntimeException("Error arg\n");
	}

	/**
	 * Automatic Analytics command line score calculator.  
	 * 
	 * Expected input:
	 * 
	 * KxJApplyWithMapWrapper ScorerClass var1=value1 var2=value2 ...
	 * 
	 * where "ScorerClass" is the name of the class generated by Automatic Analytics (which should
	 * be in the classpath)
	 *
	 * @param args
	 */
	public static void main(String[] iArgs) {
		try {
			KxJApplyWithMapWrapper lMapWrapper = null;
			FileOutputStream lOut = null;
			String lSeparator = new String(",");
			InputStream lFile = null;

			for( int i=0; i<iArgs.length; i++ ) {
				if( iArgs[i].equalsIgnoreCase("-in") ) {
					if( i+1 >= iArgs.length ) {
						printArgError("missing", "in");
					}
					lFile = new FileInputStream(iArgs[i+1]);
					i++;
				}
				else if( iArgs[i].equalsIgnoreCase("-model" ) ) {
					if( i+1 >= iArgs.length ) {
						printArgError("missing", "model");
					}
					String lScorerClassName = iArgs[i+1];

					try {
						lMapWrapper = new KxJApplyWithMapWrapper(lScorerClassName);
					} catch (Exception e) {
						System.out.println("Scorer class "+lScorerClassName+" could not be instantiated.  Make sure it's in the classpath.");
						System.exit(0);
					}
					i++;
				}
				else if( iArgs[i].equalsIgnoreCase("-out") ) {
					if( i+1 >= iArgs.length ) {
						printArgError("missing", "out");
					}
					lOut = new FileOutputStream(iArgs[i+1]);
					i++;
				}
				else if( iArgs[i].equalsIgnoreCase("-separator") ) {
					if( i+1 >= iArgs.length ) {
						printArgError("missing", "separator");
					}
					lSeparator = iArgs[i+1];
					i++;
				}
				else if( iArgs[i].equalsIgnoreCase("-usage") ) {
					usage();
				}
				else {
					printArgError( "unknown", iArgs[i] );
				}
			}

			PrintStream lOutResult = new PrintStream(lOut);

			KxFileReader.UTF8BomReader lUTF8Reader = new KxFileReader.UTF8BomReader(lFile);
			boolean lIsUTF8 = lUTF8Reader.hasUTF8ByteOrderMarker();
			InputStreamReader lStreamReader =
				(lIsUTF8 ? new InputStreamReader(lUTF8Reader, "UTF8")
						: new InputStreamReader(lUTF8Reader));
			BufferedReader lBuffer = new BufferedReader(lStreamReader);

			// skip the first row which contains the header file
			String lCurrentLine = lBuffer.readLine(); 
			String[] lVariables = lCurrentLine.split(lSeparator);

			for (String lOutput:lMapWrapper.mScorerModel.getModelOutputVariables())
			{
				lOutResult.print(lOutput);
			}
			lOutResult.println();

			while ((lCurrentLine = lBuffer.readLine()) != null)
			{
				String[] lValues = lCurrentLine.split(lSeparator);
				for (int i=0; i< lVariables.length; i++)
				{
					lMapWrapper.addVariable(lVariables[i], lValues[i]);
				}
				HashMap<String,Object> lOutputs = lMapWrapper.apply();
				for (String lOutput:lOutputs.keySet())
				{
					lOutResult.print(lOutputs.get(lOutput).toString());
				}
				lOutResult.println();
			}
		}
		catch (Exception e) {
			KxLog.getInstance().print(e.getMessage() + "\n");
		}
	}
	
	public KxJApplyWithMapWrapper(IKxJModel iModel)
	{
		this.mScorerModel = iModel;
		
		initializeVariables();
	}
	
	public KxJApplyWithMapWrapper(String iClassName) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
		mScorerClassName = iClassName;
		
		@SuppressWarnings("rawtypes")
		Class lModelClass = Class.forName(iClassName);
		this.mScorerModel = (IKxJModel)lModelClass.newInstance();
		
		initializeVariables();
	}
	
	private void initializeVariables()
	{
		for (String lVarName:mScorerModel.getModelInputVariables())
		{
			mInputVariables.put(lVarName,null);
		}
	}
	
	public void addVariable(String lVariableName,String lValue) {
		mInputVariables.put(lVariableName, lValue);
	}
	
	public class KXENScorerInput implements IKxJModelInput
	{
		List<String> mInputList;
		HashMap<String,String> mMap;
		
		public KXENScorerInput(String[] iInputVariableNames,HashMap<String,String> iMap)
		{
			this.mInputList = Arrays.asList(iInputVariableNames);
			this.mMap = iMap;
		}
		
		public int indexOf(String iVarName)
		{
			return mInputList.indexOf(iVarName);
		}
		
		public String getVar(int iIndex)
		{
			String lVarName = mInputList.get(iIndex);
			return mMap.get(lVarName);
		}
		
		public boolean isEmpty( int iIndex, String iMissingString ) {
			String lValue = getVar(iIndex);
			return (lValue==null || lValue.equals(iMissingString));
		}

		public int intValue( int iIndex ) {
			String lValue = getVar(iIndex);
			return (lValue==null?0:Integer.valueOf(lValue).intValue());
		}

		public float floatValue( int iIndex ) {
			String lValue = getVar(iIndex);
			return (lValue==null?0:Float.valueOf(lValue).floatValue());
		}

		public double doubleValue( int iIndex ) {
			String lValue = getVar(iIndex);
			return (lValue==null?0:Double.valueOf(lValue).doubleValue());
		}

		public Date dateValue( int iIndex ) {
			try	{
				return DateUtils.getISODateFromString(getVar(iIndex));
			} catch (ParseException lExceptionDateTime) {
				return null;
			}
		}

		public String stringValue( int iIndex ) {
			return getVar(iIndex);
		}
	}

	public HashMap<String,Object> apply()
	{
		HashMap<String,Object> lOutputs = new HashMap<String,Object>();
		
		Object[] lScores = mScorerModel.apply(new KXENScorerInput(mScorerModel.getModelInputVariables(),
																  mInputVariables));
		String[] lOutputVars = mScorerModel.getModelOutputVariables();
		for (int i=0;i<lOutputVars.length;i++)
		{
			lOutputs.put(lOutputVars[i], lScores[i]);
		}
		
		return lOutputs;
	}
}
